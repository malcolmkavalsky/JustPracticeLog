package com.example.malcolm.justpracticelog;

import android.os.Bundle;
import android.util.Log;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by malcolm on 6/28/15.
 */
public class Practice {
    private long myid;
    private long pieceId;
    private int minutes; // Duration
    private int ymd; // Date in my YMD format (year,month,day) also store in Database for speeding up searches
    private int hms; // Time in my HMS format

    final static String DB_FILE_NAME = "practices.txt";
    private static Map<Long, Practice> practices;

    public final static int GREEN = 0xff00aa00;
    public final static int RED = 0xffdd0000;
    public final static int YELLOW = 0xffaaaa00;
    public final static int BLACK = 0xff000000;

    public Practice() {
        setMyid(Database.generateUniqueId());
    }

    public Practice(long pieceId, int minutes, int ymd, int hms) {
        setMyid(Database.generateUniqueId());
        setPieceId(pieceId);
        setMinutes(minutes);
        setYmd(ymd);
        setHms(hms);
    }

    /*
    public Practice(long myid, long pieceId, int minutes, int ymd, int hms) {
        setMyid(myid);
        setPieceId(pieceId);
        setMinutes(minutes);
        setYmd(ymd);
        setHms(hms);
    }
    */
    public String toPsvString() {

        return myid + "|" + pieceId + "|" + MyDate.toString(getYmd()) + "|" + MyTime.toString(getHms()) + "|" + minutes;
    }

    // Format generated by toString  above
    public void fromPsvString(String string) {
        String[] parts = string.split("\\|");
        setMyid(Long.parseLong(parts[0]));
        setPieceId((Long.parseLong(parts[1])));

        int ymd = MyDate.fromString(parts[2]);
        setYmd(ymd);

        int hms = MyTime.fromString(parts[3]);
        setHms(hms);
        setMinutes(Integer.parseInt(parts[4]));
    }

    public long getMyid() {
        return myid;
    }

    public void setMyid(long myid) {
        this.myid = myid;
    }

    public long getPieceId() {
        return pieceId;
    }

    public void setPieceId(long pieceId) {
        this.pieceId = pieceId;
    }

    public int getMinutes() {
        return minutes;
    }

    public void setMinutes(int minutes) {
        this.minutes = minutes;
    }

    public int getYmd() {
        return ymd;
    }

    public void setYmd(int ymd) {
        this.ymd = ymd;
    }

    public int getHms() {
        return hms;
    }

    public void setHms(int hms) {
        this.hms = hms;
    }

    public Bundle toBundle() {
        Bundle bundle = new Bundle();
        bundle.putLong("id", getMyid());
        bundle.putLong("pieceid", getPieceId());
        bundle.putInt("ymd", getYmd());
        bundle.putInt("hms", getHms());
        bundle.putInt("minutes", getMinutes());
        return bundle;

    }

    // CRUD interface:create, read, update, delete

    public static void create(Practice practice) {
        practices.put(practice.getMyid(), practice);
        saveDatabase();
    }

    public static void createSkipSave(Practice practice) {
        practices.put(practice.getMyid(), practice);
    }

    public static Practice read(long id) {
        return practices.get(id);
    }

    public static void update(Practice practice) {
        Practice current = read(practice.getMyid());

        current.setPieceId(practice.getPieceId());
        current.setYmd(practice.getYmd());
        current.setHms(practice.getHms());
        current.setMinutes(practice.getMinutes());
        practices.put(current.getMyid(), current);
        saveDatabase();
    }

    public static void delete(Practice practice) {
        practices.remove(practice.getMyid());
        saveDatabase();
    }

    public static Practice add(Practice practice) {
        create(practice);
        return practice;
    }

    public static Practice add(long pieceId, int minutes, int ymd, int hms) {
        Practice practice = new Practice(pieceId, minutes, ymd, hms);
        create(practice);
        return practice;
    }

    public static List<Practice> getAllPractices() {
        return new ArrayList<Practice>(practices.values());
    }
    public static List<Practice> getAllPracticeItemsForPieceOnDay(long pieceId, int ymd) {
        List<Practice> result = new ArrayList<Practice>();
        for (Practice item : getAllPractices()) {
            if (item.getPieceId() == pieceId && item.getYmd() == ymd)
                result.add(item);
        }
        return result;
    }
    static List<Long> getAllPiecesPracticedForWeek(int ymd) {
        List<Long> result = new ArrayList<Long>();
        int ymd_start = MyDate.startOfWeek(ymd);
        int ymd_end = MyDate.nextWeek(ymd_start);

        for( Practice item : getAllPractices()) {
            int item_ymd = item.getYmd();
            if( item_ymd >= ymd_start && item_ymd < ymd_end )
                result.add(item.getPieceId());
        }
        return result;
    }

    public static int totalDailyPracticeForPiece(long pieceId, int ymd) {
        int minutes = 0;
        for (Practice item : getAllPractices()) {
            if (item.getPieceId() == pieceId && item.getYmd() == ymd)
                minutes += item.getMinutes();
        }
        return minutes;
    }

    public static int totalWeeklyPracticeTimeForPiece(long pieceId) {
        int minutes = 0;
        int day = MyDate.startOfWeek(MyDate.today());
        for (int i = 0; i < 7; i++) {
            minutes += totalDailyPracticeForPiece(pieceId, day);
            day = MyDate.nextDay(day);
        }
        return minutes;
    }

    public static String getDaysPracticed(long piecid) {
        String week = "SMTWTFS";
        char[] s = week.toCharArray();

        int ymd = MyDate.startOfWeek(MyDate.today());
        for (int i = 0; i < 7; i++) {
            if (totalDailyPracticeForPiece(piecid, ymd) == 0)
                s[i] = '_';
            ymd = MyDate.nextDay(ymd);
        }
        return String.valueOf(s);
    }

    public static int getPracticePieceLabelColor(Plan plan) {
        if (plan == null) {
            return BLACK;
        }

        int today_num = MyDate.dayOfWeek(MyDate.today()) - 1;
        int total_mins_practiced = 0;
        int total_mins_planned = 0;
        int ymd = MyDate.startOfWeek(MyDate.today());
        for (int i = 0; i <= today_num; i++) {
            if (plan.getPracticeOn(i))
                total_mins_planned += plan.getMinutes();
            total_mins_practiced += Practice.totalDailyPracticeForPiece(plan.getPieceId(), ymd);
            ymd = MyDate.nextDay(ymd);
        }
        if (total_mins_practiced >= total_mins_planned) {
            return GREEN;
        } else if (total_mins_practiced >= total_mins_planned / 2) {
            return YELLOW;
        } else {
            return RED;
        }
    }

    public static int getTotalPracticeTime(int ymd) {
        int minutes = 0;
        for (Practice item : getAllPractices()) {
            if (ymd == item.getYmd())
                minutes += item.getMinutes();
        }
        return minutes;
    }

    public static void initDatabase() {
        practices = new HashMap<Long, Practice>();

    }

    public static void loadDatabase() {
        File file = new File(Database.context.getExternalFilesDir(null), DB_FILE_NAME);
        BufferedReader reader;
        initDatabase();

        try {
            InputStream inputStream = new FileInputStream(file);
            reader = new BufferedReader(new InputStreamReader(inputStream));
            String line = reader.readLine();

            while (line != null) {
                Practice practice = new Practice();
                practice.fromPsvString(line);
                practices.put(practice.getMyid(), practice);
                line = reader.readLine();
            }
            reader.close();
            inputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void saveDatabase() {
        File file = new File(Database.context.getExternalFilesDir(null), DB_FILE_NAME);
        try {
            OutputStream outputStream = new FileOutputStream(file);
            for (Practice practice : getAllPractices()) {
                outputStream.write(practice.toPsvString().getBytes());
                outputStream.write("\n".getBytes());
            }
            outputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static void deleteAllPracticeSessions(int ymd, long pieceid) {
        List<Practice> pList = Practice.getAllPracticeItemsForPieceOnDay(pieceid, ymd);
        for( Practice item : pList) {
            Practice.delete(item);
        }
    }

    public static void replaceDuration(int ymd, long pieceid, int minutes) {
        List<Practice> pList = Practice.getAllPracticeItemsForPieceOnDay(pieceid, ymd);
        // Delete all items except for first one
        for( int i=1; i< pList.size();i++) {
            Practice item = pList.get(i);
            Practice.delete(item);
        }
        Practice item;
        if( pList.size() > 0 ) {
            item = pList.get(0);
            item.setMinutes(minutes);
            Practice.update(item);
        } else {
            item = new Practice();
            item.setPieceId(pieceid);
            item.setYmd(ymd);
            item.setMinutes(minutes);
            Practice.add(item);
        }

    }
}
